#include <string>
#include <vector>

using namespace std;
bool gi[102][102];
bool bo[102][102];

//이 분 풀이임. https://sooooooyn.tistory.com/32
/*
다른 사람 풀이랑 비교해보면서 봤더니
생각 자체가 틀리진 않았었다.
근데 그냥 굉장히 복잡하게 풀었기 때문에 갈아엎어버렸다.
그리고 빼먹은 조건들도 있어서 아마 제대로 안됐을 거다.
설치 가능 조건들을 빠짐없이 찾는 게 제일 중요한 문제이다.

그리고 이게 인덱스때문에 짜증나는 일이 생기는데.
그거를 하나하나 해주기 귀찮기 때문에 옆을 비워두는 식으로
구현을 하셨더라.
어차피 확인하는 곳이라고 해봐야 1정도씩밖에 되지 않기 때문에.

아무튼간에
또 못풀었다. 카카오문제는 그냥 나혼자 못풀겠음.
애초에 못푼다고 생각을 하고 시작하는 걸수도 있겠지만
그냥 너무. 무서운 문제라 해야되나.
내가 갈 수 있는 곳은 아닌 것 같음.
*/

//기둥을 설치할 수 있니?
bool kiAlive(int x, int y, int n) {

	//가장 바닥이면 설치 가능 
	if (y == 1) return true;
	// 바로 아래에 기둥있으면 설치 가능
	if (gi[x][y - 1]) return true;
	// 왼쪽에 보 있으면 설치 가능
	if (bo[x - 1][y]) return true;
	// 그 자리에 보 있어도 설치 가능..
	if (bo[x][y]) return true;

	return false;
}

bool boAlive(int x, int y, int n) {

	//기둥이 아래에 설치돼 있으면 가능
	if (gi[x][y - 1]) return true;
	//기둥이 오른쪽에 설치돼있어도 가능
	if (gi[x + 1][y - 1]) return true;
	//보가 양 옆으로 설치돼있어도 가능
	if (bo[x + 1][y] && bo[x - 1][y]) return true;

	return false;
}

vector<vector<int>> solution(int n, vector<vector<int>> build_frame) {
	vector<vector<int>> answer;

	//이 문제는 배열의 형태가 안맞으니까 헷갈리는 것 같아요.

	int size = build_frame.size();
	for (int i = 0; i<size; i++) {
		int x = build_frame[i][0];
		int y = build_frame[i][1];
		int gujo = build_frame[i][2];//0은 기둥, 1은 보.
		int sulchi = build_frame[i][3];//0은 삭제 1은 설치.
        x++;
        y++;
        
		//기둥 설치
		if (gujo == 0 && sulchi == 1) {
			if (kiAlive(x, y, n)) {
				gi[x][y] = 1;
			}
		}
		//보 설치
		else if (gujo == 1 && sulchi == 1) {
			if (boAlive(x, y, n)) {
				bo[x][y] = 1;
			}
		}
		//기둥 삭제
		else if (gujo == 0 && sulchi == 0) {
			bool can = true;
			gi[x][y] = 0;//일단 먼저 삭제를 한 후에
			//삭제 해도 되는 기둥인지 아닌지를 판단한다.

			//위에 기둥이 있는데 이 기둥이.. 살아남지 못하면
			if (gi[x][y + 1] && !kiAlive(x, y + 1, n)) can = false;
			//위에 보가 있고 그 보가 살아남지 못한다면 삭제 불가임.
			else if (bo[x][y + 1] && !boAlive(x, y + 1, n)) can = false;
			//위 왼쪽에 보가 있는데 그 보가 살아남지 못하면 삭제 불가
			else if (bo[x - 1][y + 1] && !boAlive(x - 1, y + 1, n)) can = false;

			//false이면 삭제 못하니까 다시 1로.. 해준다.
			if (!can) gi[x][y] = 1;
		}
		//보 삭제
		else if (gujo == 1 && sulchi == 0) {
			bool can = true;
			bo[x][y] = 0;

			//내 보 삭제했을 때 그 기둥이 못 살면 안됨.
			if (gi[x][y] && !kiAlive(x, y, n)) can = false;
			//오른쪽 기둥이 나 없으면 안되는 경우 
			else if (gi[x + 1][y] && !kiAlive(x + 1, y, n)) can = false;
			//왼쪽 보가 나 없으면 안되는 경우 
			else if (bo[x - 1][y] && !boAlive(x - 1, y, n)) can = false;
			//오른쪽 보가 나 없으면 안되는 경우..
			else if (bo[x + 1][y] && !boAlive(x + 1, y, n)) can = false;

			//솔직히 이 문제는 경우의 수 찾는 게 다한거임..진짜로..

			if (!can) bo[x][y] = 1;
		}
	}

	for (int i = 1; i <= n + 1; i++) {
		for (int j = 1; j <= n + 1; j++) {
			if (gi[i][j]) {
				answer.push_back({ i - 1, j - 1, 0 });
			}
			if (bo[i][j]) {
				answer.push_back({ i - 1, j - 1, 1 });
			}
		}
	}

	return answer;
}

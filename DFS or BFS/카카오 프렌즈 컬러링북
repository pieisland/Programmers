#include <vector>
#include <queue>

using namespace std;

//200710
//전형적인 bfs 문제.

int check[100][100];
int mm, nn;
int dir[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

bool isinside(int y, int x){
    if(y>=0 && y< mm & x>=0 && x<nn) return true;
    else return false;
}

int bfs(int y, int x, vector<vector<int>> pic){
    queue<pair<int, int>> q;
    q.push({y, x});
    check[y][x]=1;
    
    int cnt = 0;
    int color = pic[y][x];
    
    while(!q.empty())
    {
        int cy = q.front().first;
        int cx = q.front().second;
        q.pop();
        cnt++;
        
        for(int i=0;i<4;i++){
            int ny = cy + dir[i][0];
            int nx = cx + dir[i][1];
            
            if(isinside(ny, nx) && check[ny][nx]==0 && color == pic[ny][nx]){
                check[ny][nx]=1;
                q.push({ny, nx});
            }
        }
    }
    return cnt;
}

// 전역 변수를 정의할 경우 함수 내에 초기화 코드를 꼭 작성해주세요.
vector<int> solution(int m, int n, vector<vector<int>> picture) {
    int number_of_area = 0;
    int max_size_of_one_area = 0;
    mm = m;
    nn = n;
    
    for(int i=0;i<100;i++)
        for(int j=0;j<100;j++)
            check[i][j]=0;
    
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(picture[i][j]!=0 && check[i][j]==0){
                int val = bfs(i, j, picture);
                number_of_area++;
                
                if(val > max_size_of_one_area)
                    max_size_of_one_area = val;
            }
        }
    }
    
    vector<int> answer(2);
    answer[0] = number_of_area;
    answer[1] = max_size_of_one_area;
    return answer;
}
